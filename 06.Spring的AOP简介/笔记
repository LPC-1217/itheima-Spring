1.1 什么是AOP
    AOP意思是面向切面编程，是通过预编译的方式和运行期动态代理实现程序功能的统一维护的一种技术。
    AOP是OOP（面向对象编程）是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生泛型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各个部分之间的耦合性降低，提高程序的可重用性，同时提高开发效率。
1.2 AOP的作用和优势
     作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强。
     优势：减少重复代码，提高开发效率，并且便于维护。
1.3 AOP的底层实现
    实际上，AOP的底层是通过Spring提供的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的蹭墙。
1.4 AOP的动态代理技术
    常用的动态代理技术
        JDK代理：基于接口的动态代理技术
        cglib代理：基于父类的动态代理技术
1.7 AOP相关概念
    Spring的AOP实现底层就是对上面动态代理的代码进行封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。
    在正式讲解AOP之前，需要理解一些关于AOP的相关术语：
        Target（目标对象）：代理的目标对象
        Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类
        Joinpoint（连接点）：是指被拦截到的点，在Spring中，这些点是方法，因为Spring只支持方法类型的连接点
        Ponitcut（切入点）：所谓切入点是指我们要对哪些Joinpoint进行拦截的定义
        Advice（通知/增强）：指拦截到Joinpoint之后所要做的事情就是通知
        Aspect（切面）：是切入点和通知的结合
        Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。Spring采用的是动态代理植入，而AspectJ采用编译期织入和类装载期织入

1.8 AOP开发明确的事项
    1.需要编写的内容
        编写核心业务代码（目标类的目标方法）
        编写切面类，切面类中有通知（增强方法功能）
        在配置文件中，配置织入关系，即将哪些通知和哪些接入点进行结合
    2.AOP技术实现的内容
        Spring框架监控切入点方法的执行，一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类型，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。
    3.AOP底层使用哪种代理方式
        在Spring中，框架会根据目标类是否实现了接口来决定采用那种代理方式（JDK和cglib）
1.9 知识要点
    aop：面向切面编程
    aop底层实现：基于JDK的动态代理和基于cglib的动态代理
    aop的重点概念：
        Pointcut（切入点）：被增强的方法
        Advice（通知/增强）：封装增强业务逻辑的方法
        Aspect（切面）：切点＋通知
        Weaving（织入）：将切点和通知结合的过程
    开发明确事项
        谁是切点（切点表达式配置）
        谁是通知（切面类中的增强方法）
        将切点和通知进行织入配置