2.1 Spring原始注解
    Spring是轻代码重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解替代xml配置文件可以简化配置，提高效率。
    Spring原始注解主要替代<Bean>的配置
        @Component:使用在类上用于实例化Bean
        @Controller:使用在Web层类上用于实例化Bean
        @Service:使用在Service层上用于实例化Bean
        @Respository:使用在dao层上用于实例化Bean
        @Autowired:使用在字段上用于根据类型注入
        @Qualifier:结合@Autowired一起使用用于根据名称进行依赖注入
        @Resource:相当于@Autowired＋@Qualifier，按照名称进行注入
        @Value:注入普通属性
        @Scope:标注Bean的作用范围
        @PostConstruct:使用在方法上标注该方法是Bean的初始化方法
        @PreDestroy:使用在方法上标注该方法是Bean的销毁方法
    注意：使用注解开发时，需要在applicationContext.xml中配置组件扫描，作用时指定那个包及其子包下的Bean需要进行扫描以便识别使用注解配置类，字段和方法。
2.2 Spring新注解
    使用上面的注解不能全部替代xml配置文件，还需要使用注解替代的配置如下：
        非自定义的<Bean>
        加载properties文件的配置<context:property-placeholder>
        组件扫描的配置<context:component-scan>
        引入其他文件<import>


    @Configuration:用于指定当前类的一个Spring配置类，当容器创建时会从该类上加载注解。
    @ComponentScan:用于指定Spring在初始化容器时要扫描的包，作用在Spring的xml配置文件中的，和<context:component-scan base-package="com.itheima"/>一样
    @Bean:使用在方法上，标注将该方法的返回值存储到Spring容器中
    @PropertySource:用于加载.properties文件中的配置，替代<context:property-placeholder location="classpath:jdbc.properties"/>
    @Import:用于导入其他配置类
