1.1 JdbcTemplate概述
    它是Spring框架中提供的一个对象，是对原始繁琐的JdbcAPI对象的简单封装，spring框架为我们提供了很多的操作模板类。
    例如：操作关系型数据库的JdbcTemplate和HibernateTemplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等
1.2 JdbcTemplate开发步骤
    1.导入spring-jdbc和spring-tx坐标
    2.创建数据库表和实体类
    3.创建jdbcTemplate对象
    4.执行数据库操作
1.3 JdbcTemplate快速入门
    1.导入坐标
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.0.5.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>5.0.5.RELEASE</version>
        </dependency>
    2.创建account表和Account实体类

        package com.itheima.dimain;

        public class Account {
            private String name;
            private double money;

            public String getName() {
                return name;
            }

            public void setName(String name) {
                this.name = name;
            }

            public double getMoney() {
                return money;
            }

            public void setMoney(double money) {
                this.money = money;
            }

            @Override
            public String toString() {
                return "Account{" +
                        "name='" + name + '\'' +
                        ", money=" + money +
                        '}';
            }
        }

    3.创建JdbcTemplate对象
    4.执行数据库操作
        //创建数据源对象
        DruidDataSource dataSource = new DruidDataSource();
        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://localhost:3306/test");
        dataSource.setUsername("root");
        dataSource.setPassword("123456");

        JdbcTemplate jdbcTemplate = new JdbcTemplate();
        //设置数据源对象
        jdbcTemplate.setDataSource(dataSource);
        //执行操作
        int row = jdbcTemplate.update("insert into account values(?,?)", "tom", 2000);
        System.out.println(row);
1.4 Spring产生JdbcTemplate对象
    我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模板对象中，配置如下：
        applicationContext.xml文件：
            <!--配置数据源对象-->
                <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
                    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                    <property name="url" value="jdbc:mysql://localhost:3306/test"/>
                    <property name="username" value="root"/>
                    <property name="password" value="123456"/>
                </bean>

                <!--jdbc模板对象-->
                <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
                    <property name="dataSource" ref="dataSource"/>
                </bean>
        测试：
             @Test
                public void test2(){
                    ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");
                    JdbcTemplate jdbcTemplate = app.getBean(JdbcTemplate.class);
                    int Bob = jdbcTemplate.update("insert into account values(?,?)", "Bob", 2000);
                    System.out.println(Bob);
                }
1.5 JdbcTemplate的常见操作
    修改操作:
         @Test
            public void testUpdate(){
                jdbcTemplate.update("update account set money=? where name=?",5000,"Tom");
            }
    删除操作：
           @Test
            public void testDelete(){
                jdbcTemplate.update("delete from account where name=?","tom");
            }

